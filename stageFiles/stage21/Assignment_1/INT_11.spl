alias FunNum R0;
alias PID R1;
alias wait_for_PID R2;
alias RetValAddr R3;

//extracting arguments from user stack
PID = [SYSTEM_STATUS_TABLE+1];
wait_for_PID = [[PAGE_TABLE_BASE+20*PID+((SP-4)/512)*2]*512+((SP-4)%512)];
FunNum = [[PAGE_TABLE_BASE+20*PID+((SP-5)/512)*2]*512+((SP-5)%512)];
RetValAddr = [PAGE_TABLE_BASE+20*PID+((SP-1)/512)*2]*512+((SP-1)%512);

//print(PID);
//print(wait_for_PID);
//print(FunNum);

//switching to kernel stack
[PROCESS_TABLE+16*PID+13]=SP;
SP = [PROCESS_TABLE+16*PID+11]*512+[PROCESS_TABLE+16*PID+12];

//changing mode flag
[PROCESS_TABLE+16*PID+9]=FunNum;

//GetPID system call
if(FunNum == 11) then
	[RetValAddr] = [PROCESS_TABLE+16*PID+1];
endif;

//GetPPID system call
if(FunNum == 12) then
	[RetValAddr] = [PROCESS_TABLE+16*PID+2];
endif;

//Wait system call
if(FunNum == 13) then

	//checking if the PID given is valid
        if((wait_for_PID<0 || wait_for_PID>15)||([PROCESS_TABLE+16*wait_for_PID+4]==TERMINATED)||(PID == wait_for_PID)) then
                [RetValAddr] = -1;
	else
		[PROCESS_TABLE+16*PID+4] = WAIT_PROCESS;
		[PROCESS_TABLE+16*PID+5] = wait_for_PID;
		multipush(R0,R1,R2,R3);
		call SCHEDULER;
		multipop(R0,R1,R2,R3);
		[RetValAddr] = 0;
	endif;
endif;

//Signal system call
if(FunNum == 14) then
	alias counter R4;
	counter = 0;
	while(counter<16) do
		if( ( [PROCESS_TABLE+16*counter+4]==WAIT_PROCESS ) && ( [PROCESS_TABLE+16*counter+5]==PID ) ) then
				[PROCESS_TABLE+16*counter+4] = READY;
		endif;
		counter = counter+1;
	endwhile;
	
endif;

[PROCESS_TABLE+16*PID+9]=0;
SP = [PROCESS_TABLE+16*PID+13];
ireturn;

