alias functionNum R1;
alias currentPID R2;

//Acquire Disk
if(functionNum == 3) then
	while([DISK_STATUS_TABLE]==1) do
		[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
		multipush(R1,R2);
		call SCHEDULER;
		multipop(R1,R2);
	endwhile;
	[DISK_STATUS_TABLE]=1;
	[DISK_STATUS_TABLE+4]=currentPID;
	return;
endif;

//Acquire semaphore
if(functionNum == 6) then
	alias counter R3;
	counter = 0;
	while(counter < MAX_SEM_COUNT) do
		if([SEMAPHORE_TABLE+counter*3+1] == 0) then
			[SEMAPHORE_TABLE+counter*3] = -1;
			[SEMAPHORE_TABLE+counter*3+1] = 1;
			R0 = counter;
			return;
		endif;
		counter = counter +1;
	endwhile;
	R0 = -1;
	return;
endif;

//Release semaphore
if(functionNum == 7) then
	alias index R2;
	alias currentPID R3;
	if([SEMAPHORE_TABLE+index*3] == currentPID) then
		[SEMAPHORE_TABLE+index*3] = -1;
		alias counter R4;
		counter = 0;
		while(counter < 15) do
			if(([PROCESS_TABLE + 16*counter + 4] == WAIT_SEMAPHORE)&&([PROCESS_TABLE + 16*counter + 5] == index)) then
			[PROCESS_TABLE + 16*counter +4] = READY;
			endif;
			counter = counter + 1;
		endwhile;
		[SEMAPHORE_TABLE+index*3+1] = [SEMAPHORE_TABLE+index*3+1] -1;
		R0 = 0;
		return;
	endif;
	R0 = -1;
	return;
endif;

//Acquire Terminal
if (functionNum == 8) then
	while ([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;

//Restore Terminal
if (functionNum == 9) then
	if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	alias counter R3;
	counter = 0;
	while (counter < 16) do
		if ([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + counter*16 + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;
	R0 = 0;
	return;
endif;

return;
