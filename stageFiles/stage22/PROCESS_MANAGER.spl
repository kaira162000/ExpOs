alias functionNum R1;
alias PID R2;

//Get PCB entry
if(functionNum == 1) then
	alias counter R3;
	R2 = -1;
	counter = 0;
	while(counter<16) do
		if([PROCESS_TABLE+16*counter+4]==TERMINATED) then
			R0=counter;
			[PROCESS_TABLE+16*counter+1] = counter;
			[PROCESS_TABLE+16*counter+4] = ALLOCATED;
			[PROCESS_TABLE+16*counter+14] = PAGE_TABLE_BASE+20*counter;
			[PROCESS_TABLE+16*counter+15] = 10;
			return;
		endif;
		counter = counter+1;
	endwhile;
	R0 = -1;
	return;
endif;	

//Free user area page
if(functionNum == 2) then
	alias userAreaPage R2;
	userAreaPage = [PROCESS_TABLE + PID*16 + 11];
	alias counter R3;
	counter = 0;
	while(counter < 8) do
		if([[PROCESS_TABLE + 16*PID + 11]*512 - 16+2*counter] == SEMAPHORE) then
			R4 = [[PROCESS_TABLE + 16*PID + 11]*512 - 16+2*counter+1];
			multipush(R1,R2,R3,R4);
			R1 = RELEASE_SEMAPHORE;
			R3 = PID;
			R2 = counter;
			call RESOURCE_MANAGER;
			multipop(R1,R2,R3,R4);
		endif;
	counter = counter + 1;
	endwhile;
	multipush(R1, R2);
	R1 = 2;
	call MEMORY_MANAGER;
	multipop(R1, R2);
	return;
endif;

//Exit Process
if(functionNum == 3) then
	//Calling Free User Area Page
	multipush(R1, R2);
	R1 = 2;
	call PROCESS_MANAGER;
	multipop(R1, R2);

	//Calling Free Page Table
	multipush(R1, R2);
	R1 = 4;
	call PROCESS_MANAGER;
	multipop(R1, R2);
	[PROCESS_TABLE + PID*16 + 4] = TERMINATED;
	if(([PROCESS_TABLE+16*PID+9])!=9) then
		alias counter R4;
        	counter = 0;
        	while(counter<16) do
                	if(([PROCESS_TABLE+16*counter+4]==WAIT_PROCESS)&&([PROCESS_TABLE+16*counter+5]==PID)) then	
				[PROCESS_TABLE+16*counter+4] = READY;
                	endif;
			if([PROCESS_TABLE+16*counter+2] == PID) then
				[PROCESS_TABLE+16*counter+2] = -1;
			endif;
                	counter = counter+1;
        	endwhile;	
	endif;
	return;
endif;

//Free Page Table
if(functionNum == 4) then
	alias PTBRCopy  R10;
	alias counter R11;
	PTBRCopy = PAGE_TABLE_BASE + PID*20;

	//Free library
	[PTBRCopy + 0] = -1;
	[PTBRCopy + 1] = "0000";
	[PTBRCopy + 2] = -1;
	[PTBRCopy + 3] = "0000";

	counter = 2;
	while(counter < 10) do
		if([PTBRCopy + 2*counter] != -1) then
			//Free the page
			multipush(R1, R2, R10, R11);
			R1 = 2;
			R2 = [PTBRCopy + 2*counter];
			call MEMORY_MANAGER;
			multipop(R1, R2, R10, R11);
			//Invalidate the entries
			[PTBRCopy + 2*counter] = -1;
			[PTBRCopy + 2*counter + 1] = "0000";
		endif;
		R3=DISK_MAP_TABLE+10*[SYSTEM_STATUS_TABLE+1]+counter;
		if(counter>3 && counter <8) then
			[R3]=-1;
		else
			if([R3]!=-1) then
				multipush(R1,R2,R3,R10,R11);
				R1=4;
				call MEMORY_MANAGER;
				multipop(R1,R2,R3,R10,R11);
			endif;
			[R3]=-1;
		endif;
		counter = counter + 1;
	endwhile;
	return;
endif;
