alias PID R0;
alias FunNum R1;
alias RetValAddr R2;

PID = [SYSTEM_STATUS_TABLE + 1];
FunNum = [[PAGE_TABLE_BASE+20*PID+((SP-5)/512)*2]*512+((SP-5)%512)];
RetValAddr = [PAGE_TABLE_BASE+20*PID+((SP-1)/512)*2]*512+((SP-1)%512);

[PROCESS_TABLE+16*PID+13]=SP;
SP = [PROCESS_TABLE+16*PID+11]*512+[PROCESS_TABLE+16*PID+12];

[PROCESS_TABLE+16*PID+9]=FunNum;

//semLock system call
if(FunNum == 19) then
	alias R3 semID;
	semID = [[PAGE_TABLE_BASE+20*PID+((SP-4)/512)*2]*512+((SP-4)%512)];	
	if((semID > 7 || semID < 0)|| ([PROCESS_TABLE + 16*PID + 11]*512 - 16 + semID*2] != 1)) then
                [RetValAddr] = -1;
                ireturn;
        endif;
	while([SEMAPHORE_TABLE+semID*3] != PID) do
		[PROCESS_TABLE+16*PID+4] = (WAIT_SEMAPHORE,semID);
		multipush(R0,R1,R2,R3);
		call SCHEDULER;
		multipop(R0,R1,R2,R3);
	endwhile;
	[SEMAPHORE_TABLE+semID*3] = PID;
endif;

//semUnlock system call
if(FunNum == 20) then
	alias R3 semID;
        semID = [[PAGE_TABLE_BASE+20*PID+((SP-4)/512)*2]*512+((SP-4)%512)];
        if((semID > 7 || semID < 0)|| ([PROCESS_TABLE + 16*PID + 11]*512 - 16 + semID*2] != 1)) then
                [RetValAddr] = -1;
                ireturn;
        endif;
	if([SEMAPHORE_TABLE + semID*3] != PID) then
		[RetValAddr] = -2;
		ireturn;
	else
		[SEMAPHORE_TABLE + semID*3] = -1;
		alias counter R4;
                counter = 0;
                while(counter < 15) do
                        if(([PROCESS_TABLE + 16*counter + 4] == WAIT_SEMAPHORE)&&([PROCESS_TABLE + 16*counter + 5] == index)) then
                        [PROCESS_TABLE + 16*counter +4] = (READY,_);
                        endif;
                        counter = counter + 1;
                endwhile;
	endif;

endif;

[PROCESS_TABLE+16*PID+9]=0;
SP = [PROCESS_TABLE+16*PID+13];
ireturn;
